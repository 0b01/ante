
type Vec = i32* _data, u32 len cap

fun Vec := Vec(i32* malloc 32, 0u32, 8u32)

//reserve numElements in Vec v, elements will be uninitialized
fun Vec.reserve: mut Vec v, u32 numElems
    if v.len + numElems > v.cap then
        let ptr = realloc{void* v._data, v.cap * 8}

        if ptr == void* 0 then
            printf "Error in reserving %u elements for Vec\n" numElems
            return ()

        v._data = ptr
        v.cap += numElems


fun Vec.push: mut Vec v, i32 elem
    if v.len >= v.cap then
        v.reserve v.cap

    v#v.len = elem
    v.len += 1

//define the extract operator
fun (#): Vec v, i32 i -> i32
    v._data#i

//define the insert operator
fun (#): mut Vec v, i32 i, i32 x
    v._data#i = x


fun print: Vec v
    printne "{"

    var i = 0
    while i < v.len do
        if i + 1 == v.len then
            printf "%d" (v#i)
        else
            printf "%d, " (v#i)

        i += 1

    print " }"


var v = Vec()

var i = 1
while i <= 100 do
    v.push i
    i += 1

print v

free <| v._data
