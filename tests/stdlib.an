`
    stdlib.an
        Experimental stdlib functions and tests
`

~math module
import "math"

i32 testInt = 4
f32 testFlt = 1/3.0

assert(sqrt(testInt) == 2)
assert(pow(testInt, 3) == 64)

assert(floor(testFlt) == 0)
assert(ceil(testFlt) == 1)


~io module
import "io"

print("Hello World!\n")
print(3)

print("Test #", 1, '\n')
print("Test #" ++ 2 ++ '\n')

File* f = new File("out.txt", File.write)
f.print("2 + 3 = 5")

~string module
import "string"


~Example declaration of String
data String
    const u32 len
    const c32[] rawStr


impl String
    String op("cast"): c32[] str
        return String(str.length(), str)

    String op("cast"): i32 int
        return String(stoi(int))

    String op("cast"): c32 c
        return String(1, [c])


void print(ParamCount count): String... s
    for u32 i in 0..count
        for c32 c in s[i]
            putchar(c)


String msg = "Hello World!"

msg = msg.repl("Hello", "Goodbye")
assert(msg == "Goodbye World!")

~op module
import "op"

impl String 
    bool op('!'): self*
        return self.len == 0

    String pop: self*
        return self[0 .. this.length-2]


~c_ffi module
import "c_ffi"

~Create a C file object, defined in c_ffi, holding cstdio and cstdlib to import.
import C("cstdio", "cstdlib")

putchar(65)
putchar(110)
~output: an
