
type Maybe!'t =
   | Some 't
   | None

type List!'t = 't elem, Maybe!List<'t>* next

fun List!'t.init: 't elem -> List!'t
    List(elem, None)


fun tail: List<'t>* l -> List<'t>*
    match l.next with
    | Some t -> tail t
    | None -> l

fun append: mut List<'t>* l, 't elem
    var t = tail l
    t.next = Some new List elem

fun print: List<'t>* l
    print l.elem
    match l.next with
    | Some n -> print n


var head = new List 0

append head 1
append head 2
append head 3

print head
