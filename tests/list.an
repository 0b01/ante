
type List<'t> = 't elem, List<'t>* next

fun List<'t>.init: 't elem -> List<'t>
    List(elem, void* 0)


fun tail: List<'t>* l -> List<'t>*
    if l.next == void* 0 then l
    else tail l.next

fun append: mut List<'t>* l, 't elem
    var t = tail l
    t.next = new List elem

fun print: List<'t>* l
    print l.elem
    if l.next != void* 0 then
        print(l.next)


var head = new List 0

append head 1
append head 2
append head 3

print head
