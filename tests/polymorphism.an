`
        polymorphism.an
    Experiments with the syntax of  various polymorphic 
    functions and datatypes.
`

~Since types in ante must start with a capital, gen is
~assumed to be a type variable
fun add: 't a b => 't
    return a + b

fun sub: 't a b => 't
    return a - b

data Op
  enum
    Add
    Sub
    Mul
    Div

fun performOperation: 't a b, Op op => 't
    return match op
        Add -> a + b
        Sub -> a - b
        Mul -> a * b
        Div -> a / b


assert(performOperation(1.0, 2.0, Op.Add) == 3.0)


data Maybe
    't | enum -> None

~Initialize i and n and autodetect their types
var i = Maybe 3
var n = None


data Result
    't | 'e

~Return type is assumed to be Result<File, FileErr>
fun writeFile: File& f, String s => Result
    return f:write(s)

