`
        functionTypes.an
    Contains possible alternatives for the current function and method syntax.
`

~standard function
i32 addS: i32 a b
    return a + b

~function declared through let
let addL = \a b
    a + b


~possible new function declaration syntaxes:

~Alternative 1:
~    + function name always alligned with body
~    + function name is easier to find by never being too far
~      towards the right due to a long return type
~    - requires new keyword, fun
~    - requires a 'returns' operator, => in this case
fun add1: i32 a b => i32
    return a + b

~Alternative 2:
~    + function name always alligned with body
~    + function name is easier to find by never being too far
~      towards the right due to a long return type
~    + no new keywords
~    - requires all statements to be able to be expressed in expression form
~    - results in function type casts with record syntax being
~      treated differently than ones without named arguments
let add2 = i32(i32 a b)
    a + b



~Current method syntax
impl Str
    ~immutable self
    Opt<u32> indexOf: self, c32 target
        for u32 i in 0 .^ self.length
            if self[i] == target
                return Some(i)
        
        return None

    ~immutable self
    Str op("++"): self, Str end
        let len = self.length + end.length
        c8* cstr = c8* malloc(len)
        memcpy(cstr, self.cstr, self.length)
        strcat(cstr, end.cstr)
        
        return String(cstr, len)

    ~Mutable self
    void trim: mut self
        
