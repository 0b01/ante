import "tests/vec.an"

type VecIter = i32* elem, u32 elems_remaining

//A type implements Iterable if it can be used as a range in a for loop, but
//cannot be used directly, necessitating a separate type to serve as the iterator
ext Vec with Iterable
    fun into_iter: Vec v -> VecIter
        VecIter(v._data, v.len)

//The type returned by into_iter is the iterator used in the for loop.  If a type
//implements both Iterable and Iterator, it is currently treated as an Iterator
ext VecIter with Iterator
    fun unwrap: VecIter v =
        @v.elem

    fun next: VecIter v =
        VecIter(i32*(u64(v.elem) + 4), v.elems_remaining-1)

    fun has_next: VecIter v =
        v.elems_remaining > 0


var v = Vec()
v.push 1
v.push 1
v.push 2
v.push 3
v.push 5
v.push 8
v.push 13
v.push 21

for i in v do
    print i
