`
        dataDecl.an
    Experimental syntax for various data structure declarations.
`

~Test , for and-ing types
type Point1 = i32, i32

~Test named fields and Newline sequencing
type Point2
    i32 x
    i32 y

~Test | for or-ing types
type Char = c8 | c32

~Test enum declaration within type declaration
type Number = enum
    One
    Two
    Three
    Four
 
type Flags = set
    Pathogen
    Public
    Private
    Const

type VarDeclNode =
    Flags modifiers
    Str typ where typ in ["i32", "u8", "void"]
    Str name

let VarDeclNode x = (Public|Pathogen), "i32", "x"



~Test untyped generics
type Maybe = 't | enum -> None


~Test type constructors
type Shape =
   | Circle: u32 radius
   | Square: u32 len
   | Rectangle: u32 len wid

fun area: Shape s =
    | Circle r -> pi*r*r
    | Square l -> l*l
    | Rectangle l w -> l*w


type Tree =
    None:
    Leaf: 't val
    Node: Tree l r

fun depth: Tree t =
    | None -> 0
    | Leaf -> 1
    | Node l r -> max(depth(l), depth(r)) + 1


~Scalar ranges and conditions
type Person =
    u8 age in 0..120
    Str name where name.length > 0

let kyle = Person(24, "Kyle")

let i = Maybe 32

~Known not to be 't due to strict typing
let j = None

`
    Rust's Result datatype would be mostly useless in ante
    since it boils down to a single or:

data Result
    t | Err
`
