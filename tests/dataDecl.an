`
        dataDecl.an
    General test for various data structure declarations.
`

~Test , for and-ing types
data Point1
    i32, i32

~Test Newline for and-ing types
data Point2
    i32
    i32

~Test named fields
data Point3
    i32 x
    i32 y

~Test | for or-ing types
data char
    c8 | c32

~Test enum declaration within type declaration
data Number
    enum Number ~declare One, Two, and Three under namespace Number
        One
        Two
        Three

~Test untyped generics
data Maybe<T>
    T | enum -> None

    T unwrap: self*
        if *self is T
            return T self
        panic("Cannot unwrap None!")
        return self


void main:
    Maybe<i32> i = 32

    ~Known not to be T due to strict typing
    Maybe<i32> j = None

    ~Declare a Maybe<i32> with T set to 0
    Maybe<i32> k = i32 None

`
    Rust's Result datatype would be mostly useless in ante
    since it boils down to a single or:

data Result<T, E>
    T | E
`
