`
        dataDecl.an
    General test for various data structure declarations.
`

~Test , for and-ing types
data Point1
    i32, i32

~Test Newline for and-ing types
data Point2
    i32
    i32

~Test named fields
data Point3
    i32 x
    i32 y

~Test | for or-ing types
data Char
    c8 | c32

~Test enum declaration within type declaration
data Number
    enum Number ~declare One, Two, and Three under namespace Number
        One
        Two
        Three

~Test untyped generics
data Maybe
    Some: t
    None

data Tree
    None:
    Leaf: t val
    Node: Tree l r


~Test type constructors
data Shape
    Circle: u32 radius
    Square: u32 len
    Rectangle: u32 len wid

u32 area: Shape s
| Circle r -> pi*r*r
| Square l -> l*l
| Rectangle l w -> l*w


u32 depth: Tree t
| None -> 0
| Leaf -> 1
| Node l r -> max(depth(l), depth(r)) + 1


void main:
    Maybe<i32> i = 32

    ~Known not to be T due to strict typing
    Maybe<i32> j = None

    ~Declare a Maybe<i32> with T set to 0
    Maybe<i32> k = i32 None

`
    Rust's Result datatype would be mostly useless in ante
    since it boils down to a single or:

data Result<T, E>
    T | E
`
