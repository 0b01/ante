#ifndef TOKENS_H
#define TOKENS_H

enum Token{
    Tok_EndOfInput,
    Tok_Identifier,

    //types
    Tok_I8,
    Tok_I16,
    Tok_I32,
    Tok_I64,
    Tok_U8,
    Tok_U16,
    Tok_U32,
    Tok_U64,
    Tok_F32,
    Tok_F64,
    Tok_Str,
    Tok_Bool,
    Tok_Void,

	Tok_Eq,
    Tok_NotEq,
	Tok_AddEq,
	Tok_SubEq,
    Tok_MulEq,
    Tok_DivEq,
	Tok_GrtrEq,
	Tok_LesrEq,
    Tok_BoolOr,
    Tok_BoolAnd,
    Tok_TrueLit,
    Tok_FalseLit,
	Tok_IntLit,
	Tok_FltLit,
	Tok_StrLit,
    Tok_StrCat,
	
    //keywords
    Tok_Return,
	Tok_If,
    Tok_Elif,
	Tok_Else,
	Tok_For,
	Tok_ForEach,
	Tok_While,
    Tok_Do,
    Tok_In,
	Tok_Continue,
	Tok_Break,
    Tok_Import,
    Tok_Enum,
    Tok_Struct,
    Tok_Class,

    Tok_Newline,
    Tok_Indent,
    Tok_Unindent,
};

const char* tokDictionary[] = {
  "EndOfInput",
  "Identifier",
             
  "I8",
  "I16",    
  "I32",
  "I64",    
  "U8",    
  "U16",    
  "U32",    
  "U64",    
  "F32",   
  "F64",   
  "Str",  
  "Bool",
  "Void",     
  
  "Eq",     
  "NotEq",     
  "AddEq",     
  "SubEq",     
  "MulEq",     
  "DivEq",     
  "GrtrEq",     
  "LesrEq",    
  "BoolOr",   
  "BoolAnd",  
  "TrueLit", 
  "FalseLit", 
  "IntLit", 
  "FltLit",  
  "StrLit",
  "StrCat",  
  
  "Return",   
  "If",
  "Elif", 
  "Else",  
  "For",     
  "ForEach",
  "While",
  "Do",
  "In",
  "Continue",
  "Break",
  "Import",
  "Enum",
  "Struct",
  "Class",
  "Newline",
  "Indent",
  "Unindent",
};

#endif
