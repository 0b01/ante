
add m n = fn f -> fn x -> m f (n f x)  // (a -> b -> c) -> (a -> d -> b) -> a -> d -> c

one f x = f x  // (a -> b) -> a -> b
two1 f x = f (f x) // (a -> a) -> a -> a

two2 = add one one

// id is polymorphic, expect no error here
id 3
id "four"

id x = x

// args: --check --show-types
// expected stdout:
// add : (forall a b c d e f. ((a - c => e) - (a - b => c) -> (a -> (b => e))))
// id : (forall a. (a -> a))
// one : (forall a b c. ((a => b) - a -> b))
// two1 : (forall a b. ((a => a) - a -> a))
// two2 : (forall a b. ((a => a) -> (a => a)))
