
trait Functor f with
    map: (f a) (a -> b) -> f b

trait Monad m with
    wrap: a -> m a
    bind: (m a) (a -> m b) -> m b


impl Functor Maybe with
    map m f =
        match m with
        | Some x -> Some (f x)
        | None -> None

impl Monad Maybe with
    wrap a = Some a
    
    bind m f =
        match m with
        | Some x -> f x
        | None -> None

// args: --check --show-types
// expected stdout:
// bind : (forall a d e. ((a d) (d -> (a e)) -> (a e)))
//   given Monad a
// map : (forall a d e. ((a d) (d -> e) -> (a e)))
//   given Functor a
// wrap : (forall a c. (c -> (a c)))
//   given Monad a
