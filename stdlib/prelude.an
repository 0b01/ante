`
        prelude.an
    Standard functions and datatypes pre-imported 
    into every Ante source file.
`

~C functions
fun printf: [c8] fmt, ...;
fun puts: [c8] str;
fun putchar: c8 char;
fun exit: i32 status;
fun malloc: u32 size => void*;
fun realloc: void* ptr, u32 size => void*;
fun free: void* mem;
fun system: [c8] cmd => i32;
fun strlen: [c8] str => u32;

~C stdio
type File = void*
type FilePos = void*

type InFile = File
type OutFile = File

fun fopen: [c8] fName, [c8] mode => File;
fun fclose: File file;

fun fputs: [c8] str, OutFile file;
fun fputc: c8 char, OutFile file;
fun fgetc: InFile file => c8;
fun fgets: [c8] str, i32 numBytes, InFile file => [c8];

fun fgetpos: File f, FilePos fp;
fun ftell: File f => i64;
fun fsetpos: File f, FilePos fp;
fun fseek: File f, i64 offset, i32 origin;

fun feof: File f => bool;
fun ferror: File f => bool;



~Ante datatypes
type Str = [c8] cStr, u32 len


~functions and methods
fun i32.print: i32 x
    printf "%d\n" x


fun printd: i32 x
    printf "%d\n" x


~ Str functions
fun print: Str s
    puts s.cStr


fun Str.print: Str s
    puts s.cStr

fun Str.cast: [c8] cStr => Str
    Str(cStr, strlen cStr)


~ IO
fun InFile.cast: [c8] fName => InFile
    let f = InFile fopen fName "r"
    fgetc f; f

fun OutFile.cast: [c8] fName => OutFile
    let f = OutFile fopen fName "w"
    fgetc f; f

fun InFile.nextLine: InFile f => Str
    var len = 0u32
    var cstr = [c8] c8* 0
    
    if feof f then
        return Str("", 0u32)

    while not feof f and
        let c = fgetc f
        if len % 32 == 0 then
            cstr = realloc (c8* cstr) (len+32)

        cstr#len = c
        len += 1
        c != '\n'
    do ()

    cstr#len-1 = '\0'
    Str(cstr, len)
