/*
        prelude.an
    Standard functions and datatypes pre-imported 
    into every Ante source file.
*/

//C functions
fun printf: c8* fmt, ... -> i32;
fun puts: c8* str -> i32;
fun putchar: c8 char;
fun getchar: -> c8;
fun exit: i32 status;
fun malloc: u64 size -> void*;
fun realloc: void* ptr, u64 size -> void*;
fun free: void* mem;
fun memcpy: void* dest src, u32 bytes -> void* /*dest*/;
fun system: c8* cmd -> i32;
fun strlen: c8* str -> u64;

//C stdio
type File = void*
type FilePos = void*

type InFile = File
type OutFile = File

fun fopen: c8* fName, c8* mode -> File;
fun fclose: File file;

fun fputs: c8* str, OutFile file;
fun fputc: c8 char, OutFile file;
fun fgetc: InFile file -> c8;
fun fgets: c8* str, i32 numBytes, InFile file -> c8*;

fun fgetpos: File f, FilePos fp;
fun ftell: File f -> i64;
fun fsetpos: File f, FilePos fp;
fun fseek: File f, i64 offset, i32 origin;

fun feof: InFile f -> bool;
fun ferror: File f -> bool;



//Ante datatypes
type Str = c8* cStr, u32 len


//functions and methods

/*  
 * prints type and value (llvm dump) of variable while compiling
 */
![meta]
fun Ante.debug: 't t;

//numerical print functions
![inline]
fun i8.print: i8 x = printf "%hhd\n" x

![inline]
fun i16.print: i16 x = printf "%hd\n" x

![inline]
fun i32.print: i32 x = printf "%d\n" x

![inline]
fun i64.print: i64 x = printf "%ld\n" x

//unsigned
![inline]
fun u8.print: u8 x = printf "%hhu\n" x

![inline]
fun u16.print: u16 x = printf "%hu\n" x

![inline]
fun u32.print: u32 x = printf "%u\n" x

![inline]
fun u64.print: u64 x = printf "%lu\n" x

//floats
![inline]
fun f16.print: f16 x = printf "%.2f\n" (f64 x)

![inline]
fun f32.print: f32 x = printf "%f\n" (f64 x)

![inline]
fun f64.print: f64 x = printf "%.14f\n" x



![inline]
fun print: c8* s
    puts s

![inline]
fun c8*: Str s = s.cStr

![inline]
fun OutFile.write: OutFile f, c8* cStr
    fputs cStr f

![inline]
fun OutFile.write: OutFile f, c8 c
    fputc c f

//Str functions
![inline]
fun Str.print: Str s
    puts s.cStr

![inline]
fun Str.write: Str s, OutFile f
    fputs (s.cStr) f


![inline]
fun Str: c8* cStr -> Str
    Str(cStr, u32 strlen cStr)

//overload Str equality operator
fun (==): Str l r -> bool
    if l.len != r.len then
        return false

    //lens are equal, so check the whole array
    var i = 0
    while l.cStr#i != '\0' do
        if l.cStr#i != r.cStr#i then
            return false

        i += 1

    l.cStr#i == r.cStr#i


//append two strings
fun (++): Str s1 s2 -> Str
    let len = s1.len + s2.len
    var buf = malloc (len+1)

    //copy first string
    memcpy buf s1.cStr s1.len

    //copy second string at offset
    var buf_offset = void*(u64 buf + s1.len)
    memcpy buf_offset s2.cStr (s2.len+1) //copy terminating null too

    Str(c8* buf, len)


//IO
fun InFile: Str fName -> InFile
    InFile fopen (fName.cStr) "r"


fun OutFile: Str fName -> OutFile
    OutFile fopen (fName.cStr) "w"


fun InFile.next_line: InFile f -> Str
    var len = 0u32
    var cstr = c8* 0

    if feof f then return ""

    while not feof f and
        let c = fgetc f
        if len % 32 == 0 then
            cstr = realloc cstr (len+32)

        cstr#len = c
        len += 1
        c != '\n'
    do ()

    len -= 1
    cstr#len = '\0'
    Str(cstr, len)



//print string without endline
fun printne: c8* str
    var i = 0
    while str#i != '\0' do
        putchar (str#i)
        i += 1

//print a message then return user input
fun input: c8* msg -> Str
    var len = 0u32
    var cstr = c8* 0

    printne msg

    while
        let c = getchar ()
        if len % 32 == 0 then
            cstr = realloc cstr (len+32)

        cstr#len = c
        len += 1
        c != '\n'
    do ()

    len -= 1
    cstr#len = '\0'
    Str(cstr, len)
