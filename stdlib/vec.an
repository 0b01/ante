
type Vec 't = 't* _data, usz len cap

ext Vec 't
    fun init :=
        Vec<'t>('t* malloc(4 * Ante.sizeof 't), 0usz, 4usz)

    fun init: Range r -> Vec i32
        fill (Vec<i32>()) r

    fun is_empty: Vec v =
        v.len == 0

    fun indices: Vec v =
        Range(0, i32 v.len, 1)

    fun len: Vec v = v.len

    fun capacity: Vec v = v.cap

    //Fill Vec with items from the Range
    fun fill: mut Vec i32 v, Range r -> Vec i32
        for i in r do
            v.push i
        v

    //reserve numElements in Vec v, elements will be uninitialized
    fun reserve: mut Vec 't v, usz numElems
        if v.len + numElems > v.cap then
            let size = (v.cap + numElems) * Ante.sizeof 't
            let ptr = realloc (void* v._data) size

            if ptr is void* 0 then
                printf "Error in reserving %u elements for Vec\n" numElems
                return ()

            v._data = 't* ptr
            v.cap += numElems

    //push an element onto the end of the vector.
    //resizes if necessary
    fun push: mut Vec 't v, 't elem
        if v.len >= v.cap then
            v.reserve v.cap

        v._data#v.len = elem
        v.len += 1

    //pop the last element off if it exists
    //this will never resize the vector.
    fun pop: mut Vec 't v -> Maybe 't
        if v.len > 0 then
            v.len -= 1
            Some (v._data#v.len)
        else None

    //remove the element at the given index and return it.
    //will error if the index is out of bounds.
    fun remove_index: mut Vec 't v, i32 idx -> 't
        if idx == v.len - 1 then
            v.len -= 1
        elif idx >= 0 and idx < v.len - 1 then
            for i in idx .. i32 v.len do
                v._data#i = v._data#(i+1)

            v.len -= 1
        else
            print "Vec.remove_index: index ${idx} out of bounds for Vec of length ${v.len}"
            exit 1

        v._data#v.len

    //remove the first instance of the given element from
    //the vector or none if the element was not found.
    //Uses == to determine element equality.
    //returns the index where the element was found.
    fun remove_first: mut Vec 't v, 't elem -> Maybe i32
        for i in v.indices () do
            if elem == v._data#i then
                v.remove_index i
                return Some i
        None

    //Remove the given indices from the vector
    //Expects the indices to be in sorted order.
    //Will error if any index is out of bounds.
    fun remove_indices: mut Vec 't v, Vec i32 indices
        var moved = 0
        for i in indices.indices() do
            let cur = indices#i

            if cur < 0 or cur >= v.len then
                print "Vec.remove: index ${cur} out of bounds for Vec of length ${v.len}"
                exit 1

            moved += 1
            if i != indices.len - 1 then
                let nxt = indices#(i+1)
                for j in cur+1 .. nxt do
                    v._data#(j-moved) = v._data#j
            else
                for j in cur+1 .. i32 v.len do
                    v._data#(j-moved) = v._data#j

        v.len -= moved


    //remove all matching elements from the vector and
    //return the number of elements removed.
    //Uses == to determine element equality.
    fun remove_all: mut Vec 't v, 't elem -> usz
        var indices = Vec<i32>()
        for i in v.indices() do
            if elem == v._data#i then
                indices.push i

        v.remove_indices indices
        indices.len


type VecIter 't = 't* view, usz idx len

ext Vec : Iterable
    fun into_iter: Vec v =
        VecIter(v._data, 0usz, v.len)

ext VecIter : Iterator
    fun has_next: VecIter v =
        v.idx < v.len

    fun unwrap: VecIter 't v -> 't
        v.view#v.idx

    fun next: VecIter 't v -> VecIter 't
        VecIter(v.view, v.idx + 1, v.len)


fun printne: Vec 't v
    printne "{ "

    var i = 0
    while i < v.len do
        printne (v._data#i)
        if i + 1 != v.len then
            printf ", "

        i += 1

    printne " }"

//define the extract operator
fun (#): Vec 't v, i32 i -> 't
    v._data#i

//define the insert operator
fun (#): mut Vec 't v, i32 i, 't x
    v._data#i = x

fun (in): 't elem, Vec 't v -> bool
    for e in v do
        if e == elem then
            return true
    false

fun (==): Vec 't l r -> bool
    if l.len != r.len then
        return false

    for i in 0 .. i32 l.len do
        if l._data#i != r._data#i then
            return false
    true
