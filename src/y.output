Terminals unused in grammar

   Operator
   Do
   Continue
   Break
   Import
   Match
   Data
   Enum
   Where
   Infect
   Cleanse
   Ct


State 107 conflicts: 1 shift/reduce


Grammar

    0 $accept: maybe_statement_list $end

    1 maybe_statement_list: statement_list
    2                     | %empty

    3 statement_list: statement_list statement
    4               | statement

    5 statement: var_decl
    6          | var_assign
    7          | fn_decl
    8          | fn_call
    9          | ret_stmt
   10          | while_loop
   11          | for_loop
   12          | if_stmt
   13          | Newline

   14 lit_type: I8
   15         | I16
   16         | I32
   17         | I64
   18         | U8
   19         | U16
   20         | U32
   21         | U64
   22         | ISz
   23         | Usz
   24         | F32
   25         | F64
   26         | C8
   27         | C16
   28         | C32
   29         | C64
   30         | Bool
   31         | Void

   32 type: type '*'
   33     | type '[' maybe_expr ']'
   34     | lit_type

   35 type_expr: type_expr ',' type
   36          | type_expr '|' type
   37          | type

   38 modifier: Pub
   39         | Pri
   40         | Pro
   41         | Const
   42         | Ext
   43         | Dyn
   44         | Pathogen

   45 maybe_modifier_list: modifier_list
   46                    | %empty

   47 modifier_list: modifier_list modifier
   48              | modifier

   49 decl: maybe_modifier_list type_expr Ident

   50 var_decl: decl '=' expr
   51         | decl

   52 var_assign: var '=' expr

   53 block: Indent statement_list Unindent

   54 params: params ',' type_expr Ident
   55       | type_expr Ident

   56 maybe_params: params
   57             | %empty

   58 fn_decl: decl ':' maybe_params block
   59        | decl '(' maybe_expr ')' ':' params block

   60 fn_call: Ident '(' maybe_expr ')'

   61 ret_stmt: Return expr

   62 maybe_else: Else block
   63           | %empty

   64 maybe_elif: Elif block
   65           | %empty

   66 maybe_elif_list: maybe_elif_list Elif block
   67                | maybe_elif

   68 if_stmt: If expr block maybe_elif_list maybe_else

   69 while_loop: While expr block

   70 for_loop: For var_decl In expr block

   71 bin_op: '+'
   72       | '-'
   73       | '*'
   74       | '/'
   75       | '%'
   76       | '^'
   77       | '|'
   78       | '&'
   79       | '<'
   80       | '>'
   81       | '.'
   82       | Eq
   83       | NotEq
   84       | AddEq
   85       | SubEq
   86       | MulEq
   87       | DivEq
   88       | GrtrEq
   89       | LesrEq
   90       | Or
   91       | And
   92       | Range
   93       | RangeEX
   94       | RangeBX
   95       | RangeX

   96 var: Ident '[' expr ']'
   97    | Ident

   98 val: fn_call
   99    | '(' expr ')'
  100    | var
  101    | IntLit
  102    | FltLit
  103    | StrLit
  104    | True
  105    | False

  106 maybe_expr: expr
  107           | %empty

  108 expr: l_expr val
  109     | val

  110 l_expr: l_expr val bin_op
  111       | val bin_op


Terminals, with rules where they appear

$end (0) 0
'%' (37) 75
'&' (38) 78
'(' (40) 59 60 99
')' (41) 59 60 99
'*' (42) 32 73
'+' (43) 71
',' (44) 35 54
'-' (45) 72
'.' (46) 81
'/' (47) 74
':' (58) 58 59
'<' (60) 79
'=' (61) 50 52
'>' (62) 80
'[' (91) 33 96
']' (93) 33 96
'^' (94) 76
'|' (124) 36 77
error (256)
Ident (258) 49 54 55 60 96 97
I8 (259) 14
I16 (260) 15
I32 (261) 16
I64 (262) 17
U8 (263) 18
U16 (264) 19
U32 (265) 20
U64 (266) 21
ISz (267) 22
Usz (268) 23
F32 (269) 24
F64 (270) 25
C8 (271) 26
C32 (272) 28
Bool (273) 30
Void (274) 31
Operator (275)
Eq (276) 82
NotEq (277) 83
AddEq (278) 84
SubEq (279) 85
MulEq (280) 86
DivEq (281) 87
GrtrEq (282) 88
LesrEq (283) 89
Or (284) 90
And (285) 91
Range (286) 92
RangeBX (287) 94
RangeEX (288) 93
RangeX (289) 95
True (290) 104
False (291) 105
IntLit (292) 101
FltLit (293) 102
StrLit (294) 103
Return (295) 61
If (296) 68
Elif (297) 64 66
Else (298) 62
For (299) 70
While (300) 69
Do (301)
In (302) 70
Continue (303)
Break (304)
Import (305)
Match (306)
Data (307)
Enum (308)
Pub (309) 38
Pri (310) 39
Pro (311) 40
Const (312) 41
Ext (313) 42
Dyn (314) 43
Pathogen (315) 44
Where (316)
Infect (317)
Cleanse (318)
Ct (319)
Newline (320) 13
Indent (321) 53
Unindent (322) 53
C16 (323) 27
C64 (324) 29


Nonterminals, with rules where they appear

$accept (88)
    on left: 0
maybe_statement_list (89)
    on left: 1 2, on right: 0
statement_list (90)
    on left: 3 4, on right: 1 3 53
statement (91)
    on left: 5 6 7 8 9 10 11 12 13, on right: 3 4
lit_type (92)
    on left: 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31,
    on right: 34
type (93)
    on left: 32 33 34, on right: 32 33 35 36 37
type_expr (94)
    on left: 35 36 37, on right: 35 36 49 54 55
modifier (95)
    on left: 38 39 40 41 42 43 44, on right: 47 48
maybe_modifier_list (96)
    on left: 45 46, on right: 49
modifier_list (97)
    on left: 47 48, on right: 45 47
decl (98)
    on left: 49, on right: 50 51 58 59
var_decl (99)
    on left: 50 51, on right: 5 70
var_assign (100)
    on left: 52, on right: 6
block (101)
    on left: 53, on right: 58 59 62 64 66 68 69 70
params (102)
    on left: 54 55, on right: 54 56 59
maybe_params (103)
    on left: 56 57, on right: 58
fn_decl (104)
    on left: 58 59, on right: 7
fn_call (105)
    on left: 60, on right: 8 98
ret_stmt (106)
    on left: 61, on right: 9
maybe_else (107)
    on left: 62 63, on right: 68
maybe_elif (108)
    on left: 64 65, on right: 67
maybe_elif_list (109)
    on left: 66 67, on right: 66 68
if_stmt (110)
    on left: 68, on right: 12
while_loop (111)
    on left: 69, on right: 10
for_loop (112)
    on left: 70, on right: 11
bin_op (113)
    on left: 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88
    89 90 91 92 93 94 95, on right: 110 111
var (114)
    on left: 96 97, on right: 52 100
val (115)
    on left: 98 99 100 101 102 103 104 105, on right: 108 109 110 111
maybe_expr (116)
    on left: 106 107, on right: 33 59 60
expr (117)
    on left: 108 109, on right: 50 52 61 68 69 70 96 99 106
l_expr (118)
    on left: 110 111, on right: 108 110


State 0

    0 $accept: . maybe_statement_list $end

    Ident     shift, and go to state 1
    Return    shift, and go to state 2
    If        shift, and go to state 3
    For       shift, and go to state 4
    While     shift, and go to state 5
    Pub       shift, and go to state 6
    Pri       shift, and go to state 7
    Pro       shift, and go to state 8
    Const     shift, and go to state 9
    Ext       shift, and go to state 10
    Dyn       shift, and go to state 11
    Pathogen  shift, and go to state 12
    Newline   shift, and go to state 13

    $end      reduce using rule 2 (maybe_statement_list)
    $default  reduce using rule 46 (maybe_modifier_list)

    maybe_statement_list  go to state 14
    statement_list        go to state 15
    statement             go to state 16
    modifier              go to state 17
    maybe_modifier_list   go to state 18
    modifier_list         go to state 19
    decl                  go to state 20
    var_decl              go to state 21
    var_assign            go to state 22
    fn_decl               go to state 23
    fn_call               go to state 24
    ret_stmt              go to state 25
    if_stmt               go to state 26
    while_loop            go to state 27
    for_loop              go to state 28
    var                   go to state 29


State 1

   60 fn_call: Ident . '(' maybe_expr ')'
   96 var: Ident . '[' expr ']'
   97    | Ident .

    '('  shift, and go to state 30
    '['  shift, and go to state 31

    $default  reduce using rule 97 (var)


State 2

   61 ret_stmt: Return . expr

    Ident   shift, and go to state 1
    True    shift, and go to state 32
    False   shift, and go to state 33
    IntLit  shift, and go to state 34
    FltLit  shift, and go to state 35
    StrLit  shift, and go to state 36
    '('     shift, and go to state 37

    fn_call  go to state 38
    var      go to state 39
    val      go to state 40
    expr     go to state 41
    l_expr   go to state 42


State 3

   68 if_stmt: If . expr block maybe_elif_list maybe_else

    Ident   shift, and go to state 1
    True    shift, and go to state 32
    False   shift, and go to state 33
    IntLit  shift, and go to state 34
    FltLit  shift, and go to state 35
    StrLit  shift, and go to state 36
    '('     shift, and go to state 37

    fn_call  go to state 38
    var      go to state 39
    val      go to state 40
    expr     go to state 43
    l_expr   go to state 42


State 4

   70 for_loop: For . var_decl In expr block

    Pub       shift, and go to state 6
    Pri       shift, and go to state 7
    Pro       shift, and go to state 8
    Const     shift, and go to state 9
    Ext       shift, and go to state 10
    Dyn       shift, and go to state 11
    Pathogen  shift, and go to state 12

    $default  reduce using rule 46 (maybe_modifier_list)

    modifier             go to state 17
    maybe_modifier_list  go to state 18
    modifier_list        go to state 19
    decl                 go to state 44
    var_decl             go to state 45


State 5

   69 while_loop: While . expr block

    Ident   shift, and go to state 1
    True    shift, and go to state 32
    False   shift, and go to state 33
    IntLit  shift, and go to state 34
    FltLit  shift, and go to state 35
    StrLit  shift, and go to state 36
    '('     shift, and go to state 37

    fn_call  go to state 38
    var      go to state 39
    val      go to state 40
    expr     go to state 46
    l_expr   go to state 42


State 6

   38 modifier: Pub .

    $default  reduce using rule 38 (modifier)


State 7

   39 modifier: Pri .

    $default  reduce using rule 39 (modifier)


State 8

   40 modifier: Pro .

    $default  reduce using rule 40 (modifier)


State 9

   41 modifier: Const .

    $default  reduce using rule 41 (modifier)


State 10

   42 modifier: Ext .

    $default  reduce using rule 42 (modifier)


State 11

   43 modifier: Dyn .

    $default  reduce using rule 43 (modifier)


State 12

   44 modifier: Pathogen .

    $default  reduce using rule 44 (modifier)


State 13

   13 statement: Newline .

    $default  reduce using rule 13 (statement)


State 14

    0 $accept: maybe_statement_list . $end

    $end  shift, and go to state 47


State 15

    1 maybe_statement_list: statement_list .
    3 statement_list: statement_list . statement

    Ident     shift, and go to state 1
    Return    shift, and go to state 2
    If        shift, and go to state 3
    For       shift, and go to state 4
    While     shift, and go to state 5
    Pub       shift, and go to state 6
    Pri       shift, and go to state 7
    Pro       shift, and go to state 8
    Const     shift, and go to state 9
    Ext       shift, and go to state 10
    Dyn       shift, and go to state 11
    Pathogen  shift, and go to state 12
    Newline   shift, and go to state 13

    $end      reduce using rule 1 (maybe_statement_list)
    $default  reduce using rule 46 (maybe_modifier_list)

    statement            go to state 48
    modifier             go to state 17
    maybe_modifier_list  go to state 18
    modifier_list        go to state 19
    decl                 go to state 20
    var_decl             go to state 21
    var_assign           go to state 22
    fn_decl              go to state 23
    fn_call              go to state 24
    ret_stmt             go to state 25
    if_stmt              go to state 26
    while_loop           go to state 27
    for_loop             go to state 28
    var                  go to state 29


State 16

    4 statement_list: statement .

    $default  reduce using rule 4 (statement_list)


State 17

   48 modifier_list: modifier .

    $default  reduce using rule 48 (modifier_list)


State 18

   49 decl: maybe_modifier_list . type_expr Ident

    I8    shift, and go to state 49
    I16   shift, and go to state 50
    I32   shift, and go to state 51
    I64   shift, and go to state 52
    U8    shift, and go to state 53
    U16   shift, and go to state 54
    U32   shift, and go to state 55
    U64   shift, and go to state 56
    ISz   shift, and go to state 57
    Usz   shift, and go to state 58
    F32   shift, and go to state 59
    F64   shift, and go to state 60
    C8    shift, and go to state 61
    C32   shift, and go to state 62
    Bool  shift, and go to state 63
    Void  shift, and go to state 64
    C16   shift, and go to state 65
    C64   shift, and go to state 66

    lit_type   go to state 67
    type       go to state 68
    type_expr  go to state 69


State 19

   45 maybe_modifier_list: modifier_list .
   47 modifier_list: modifier_list . modifier

    Pub       shift, and go to state 6
    Pri       shift, and go to state 7
    Pro       shift, and go to state 8
    Const     shift, and go to state 9
    Ext       shift, and go to state 10
    Dyn       shift, and go to state 11
    Pathogen  shift, and go to state 12

    $default  reduce using rule 45 (maybe_modifier_list)

    modifier  go to state 70


State 20

   50 var_decl: decl . '=' expr
   51         | decl .
   58 fn_decl: decl . ':' maybe_params block
   59        | decl . '(' maybe_expr ')' ':' params block

    '('  shift, and go to state 71
    '='  shift, and go to state 72
    ':'  shift, and go to state 73

    $default  reduce using rule 51 (var_decl)


State 21

    5 statement: var_decl .

    $default  reduce using rule 5 (statement)


State 22

    6 statement: var_assign .

    $default  reduce using rule 6 (statement)


State 23

    7 statement: fn_decl .

    $default  reduce using rule 7 (statement)


State 24

    8 statement: fn_call .

    $default  reduce using rule 8 (statement)


State 25

    9 statement: ret_stmt .

    $default  reduce using rule 9 (statement)


State 26

   12 statement: if_stmt .

    $default  reduce using rule 12 (statement)


State 27

   10 statement: while_loop .

    $default  reduce using rule 10 (statement)


State 28

   11 statement: for_loop .

    $default  reduce using rule 11 (statement)


State 29

   52 var_assign: var . '=' expr

    '='  shift, and go to state 74


State 30

   60 fn_call: Ident '(' . maybe_expr ')'

    Ident   shift, and go to state 1
    True    shift, and go to state 32
    False   shift, and go to state 33
    IntLit  shift, and go to state 34
    FltLit  shift, and go to state 35
    StrLit  shift, and go to state 36
    '('     shift, and go to state 37

    $default  reduce using rule 107 (maybe_expr)

    fn_call     go to state 38
    var         go to state 39
    val         go to state 40
    maybe_expr  go to state 75
    expr        go to state 76
    l_expr      go to state 42


State 31

   96 var: Ident '[' . expr ']'

    Ident   shift, and go to state 1
    True    shift, and go to state 32
    False   shift, and go to state 33
    IntLit  shift, and go to state 34
    FltLit  shift, and go to state 35
    StrLit  shift, and go to state 36
    '('     shift, and go to state 37

    fn_call  go to state 38
    var      go to state 39
    val      go to state 40
    expr     go to state 77
    l_expr   go to state 42


State 32

  104 val: True .

    $default  reduce using rule 104 (val)


State 33

  105 val: False .

    $default  reduce using rule 105 (val)


State 34

  101 val: IntLit .

    $default  reduce using rule 101 (val)


State 35

  102 val: FltLit .

    $default  reduce using rule 102 (val)


State 36

  103 val: StrLit .

    $default  reduce using rule 103 (val)


State 37

   99 val: '(' . expr ')'

    Ident   shift, and go to state 1
    True    shift, and go to state 32
    False   shift, and go to state 33
    IntLit  shift, and go to state 34
    FltLit  shift, and go to state 35
    StrLit  shift, and go to state 36
    '('     shift, and go to state 37

    fn_call  go to state 38
    var      go to state 39
    val      go to state 40
    expr     go to state 78
    l_expr   go to state 42


State 38

   98 val: fn_call .

    $default  reduce using rule 98 (val)


State 39

  100 val: var .

    $default  reduce using rule 100 (val)


State 40

  109 expr: val .
  111 l_expr: val . bin_op

    Eq       shift, and go to state 79
    NotEq    shift, and go to state 80
    AddEq    shift, and go to state 81
    SubEq    shift, and go to state 82
    MulEq    shift, and go to state 83
    DivEq    shift, and go to state 84
    GrtrEq   shift, and go to state 85
    LesrEq   shift, and go to state 86
    Or       shift, and go to state 87
    And      shift, and go to state 88
    Range    shift, and go to state 89
    RangeBX  shift, and go to state 90
    RangeEX  shift, and go to state 91
    RangeX   shift, and go to state 92
    '.'      shift, and go to state 93
    '*'      shift, and go to state 94
    '|'      shift, and go to state 95
    '+'      shift, and go to state 96
    '-'      shift, and go to state 97
    '/'      shift, and go to state 98
    '%'      shift, and go to state 99
    '^'      shift, and go to state 100
    '&'      shift, and go to state 101
    '<'      shift, and go to state 102
    '>'      shift, and go to state 103

    $default  reduce using rule 109 (expr)

    bin_op  go to state 104


State 41

   61 ret_stmt: Return expr .

    $default  reduce using rule 61 (ret_stmt)


State 42

  108 expr: l_expr . val
  110 l_expr: l_expr . val bin_op

    Ident   shift, and go to state 1
    True    shift, and go to state 32
    False   shift, and go to state 33
    IntLit  shift, and go to state 34
    FltLit  shift, and go to state 35
    StrLit  shift, and go to state 36
    '('     shift, and go to state 37

    fn_call  go to state 38
    var      go to state 39
    val      go to state 105


State 43

   68 if_stmt: If expr . block maybe_elif_list maybe_else

    Indent  shift, and go to state 106

    block  go to state 107


State 44

   50 var_decl: decl . '=' expr
   51         | decl .

    '='  shift, and go to state 72

    $default  reduce using rule 51 (var_decl)


State 45

   70 for_loop: For var_decl . In expr block

    In  shift, and go to state 108


State 46

   69 while_loop: While expr . block

    Indent  shift, and go to state 106

    block  go to state 109


State 47

    0 $accept: maybe_statement_list $end .

    $default  accept


State 48

    3 statement_list: statement_list statement .

    $default  reduce using rule 3 (statement_list)


State 49

   14 lit_type: I8 .

    $default  reduce using rule 14 (lit_type)


State 50

   15 lit_type: I16 .

    $default  reduce using rule 15 (lit_type)


State 51

   16 lit_type: I32 .

    $default  reduce using rule 16 (lit_type)


State 52

   17 lit_type: I64 .

    $default  reduce using rule 17 (lit_type)


State 53

   18 lit_type: U8 .

    $default  reduce using rule 18 (lit_type)


State 54

   19 lit_type: U16 .

    $default  reduce using rule 19 (lit_type)


State 55

   20 lit_type: U32 .

    $default  reduce using rule 20 (lit_type)


State 56

   21 lit_type: U64 .

    $default  reduce using rule 21 (lit_type)


State 57

   22 lit_type: ISz .

    $default  reduce using rule 22 (lit_type)


State 58

   23 lit_type: Usz .

    $default  reduce using rule 23 (lit_type)


State 59

   24 lit_type: F32 .

    $default  reduce using rule 24 (lit_type)


State 60

   25 lit_type: F64 .

    $default  reduce using rule 25 (lit_type)


State 61

   26 lit_type: C8 .

    $default  reduce using rule 26 (lit_type)


State 62

   28 lit_type: C32 .

    $default  reduce using rule 28 (lit_type)


State 63

   30 lit_type: Bool .

    $default  reduce using rule 30 (lit_type)


State 64

   31 lit_type: Void .

    $default  reduce using rule 31 (lit_type)


State 65

   27 lit_type: C16 .

    $default  reduce using rule 27 (lit_type)


State 66

   29 lit_type: C64 .

    $default  reduce using rule 29 (lit_type)


State 67

   34 type: lit_type .

    $default  reduce using rule 34 (type)


State 68

   32 type: type . '*'
   33     | type . '[' maybe_expr ']'
   37 type_expr: type .

    '*'  shift, and go to state 110
    '['  shift, and go to state 111

    $default  reduce using rule 37 (type_expr)


State 69

   35 type_expr: type_expr . ',' type
   36          | type_expr . '|' type
   49 decl: maybe_modifier_list type_expr . Ident

    Ident  shift, and go to state 112
    ','    shift, and go to state 113
    '|'    shift, and go to state 114


State 70

   47 modifier_list: modifier_list modifier .

    $default  reduce using rule 47 (modifier_list)


State 71

   59 fn_decl: decl '(' . maybe_expr ')' ':' params block

    Ident   shift, and go to state 1
    True    shift, and go to state 32
    False   shift, and go to state 33
    IntLit  shift, and go to state 34
    FltLit  shift, and go to state 35
    StrLit  shift, and go to state 36
    '('     shift, and go to state 37

    $default  reduce using rule 107 (maybe_expr)

    fn_call     go to state 38
    var         go to state 39
    val         go to state 40
    maybe_expr  go to state 115
    expr        go to state 76
    l_expr      go to state 42


State 72

   50 var_decl: decl '=' . expr

    Ident   shift, and go to state 1
    True    shift, and go to state 32
    False   shift, and go to state 33
    IntLit  shift, and go to state 34
    FltLit  shift, and go to state 35
    StrLit  shift, and go to state 36
    '('     shift, and go to state 37

    fn_call  go to state 38
    var      go to state 39
    val      go to state 40
    expr     go to state 116
    l_expr   go to state 42


State 73

   58 fn_decl: decl ':' . maybe_params block

    I8    shift, and go to state 49
    I16   shift, and go to state 50
    I32   shift, and go to state 51
    I64   shift, and go to state 52
    U8    shift, and go to state 53
    U16   shift, and go to state 54
    U32   shift, and go to state 55
    U64   shift, and go to state 56
    ISz   shift, and go to state 57
    Usz   shift, and go to state 58
    F32   shift, and go to state 59
    F64   shift, and go to state 60
    C8    shift, and go to state 61
    C32   shift, and go to state 62
    Bool  shift, and go to state 63
    Void  shift, and go to state 64
    C16   shift, and go to state 65
    C64   shift, and go to state 66

    $default  reduce using rule 57 (maybe_params)

    lit_type      go to state 67
    type          go to state 68
    type_expr     go to state 117
    params        go to state 118
    maybe_params  go to state 119


State 74

   52 var_assign: var '=' . expr

    Ident   shift, and go to state 1
    True    shift, and go to state 32
    False   shift, and go to state 33
    IntLit  shift, and go to state 34
    FltLit  shift, and go to state 35
    StrLit  shift, and go to state 36
    '('     shift, and go to state 37

    fn_call  go to state 38
    var      go to state 39
    val      go to state 40
    expr     go to state 120
    l_expr   go to state 42


State 75

   60 fn_call: Ident '(' maybe_expr . ')'

    ')'  shift, and go to state 121


State 76

  106 maybe_expr: expr .

    $default  reduce using rule 106 (maybe_expr)


State 77

   96 var: Ident '[' expr . ']'

    ']'  shift, and go to state 122


State 78

   99 val: '(' expr . ')'

    ')'  shift, and go to state 123


State 79

   82 bin_op: Eq .

    $default  reduce using rule 82 (bin_op)


State 80

   83 bin_op: NotEq .

    $default  reduce using rule 83 (bin_op)


State 81

   84 bin_op: AddEq .

    $default  reduce using rule 84 (bin_op)


State 82

   85 bin_op: SubEq .

    $default  reduce using rule 85 (bin_op)


State 83

   86 bin_op: MulEq .

    $default  reduce using rule 86 (bin_op)


State 84

   87 bin_op: DivEq .

    $default  reduce using rule 87 (bin_op)


State 85

   88 bin_op: GrtrEq .

    $default  reduce using rule 88 (bin_op)


State 86

   89 bin_op: LesrEq .

    $default  reduce using rule 89 (bin_op)


State 87

   90 bin_op: Or .

    $default  reduce using rule 90 (bin_op)


State 88

   91 bin_op: And .

    $default  reduce using rule 91 (bin_op)


State 89

   92 bin_op: Range .

    $default  reduce using rule 92 (bin_op)


State 90

   94 bin_op: RangeBX .

    $default  reduce using rule 94 (bin_op)


State 91

   93 bin_op: RangeEX .

    $default  reduce using rule 93 (bin_op)


State 92

   95 bin_op: RangeX .

    $default  reduce using rule 95 (bin_op)


State 93

   81 bin_op: '.' .

    $default  reduce using rule 81 (bin_op)


State 94

   73 bin_op: '*' .

    $default  reduce using rule 73 (bin_op)


State 95

   77 bin_op: '|' .

    $default  reduce using rule 77 (bin_op)


State 96

   71 bin_op: '+' .

    $default  reduce using rule 71 (bin_op)


State 97

   72 bin_op: '-' .

    $default  reduce using rule 72 (bin_op)


State 98

   74 bin_op: '/' .

    $default  reduce using rule 74 (bin_op)


State 99

   75 bin_op: '%' .

    $default  reduce using rule 75 (bin_op)


State 100

   76 bin_op: '^' .

    $default  reduce using rule 76 (bin_op)


State 101

   78 bin_op: '&' .

    $default  reduce using rule 78 (bin_op)


State 102

   79 bin_op: '<' .

    $default  reduce using rule 79 (bin_op)


State 103

   80 bin_op: '>' .

    $default  reduce using rule 80 (bin_op)


State 104

  111 l_expr: val bin_op .

    $default  reduce using rule 111 (l_expr)


State 105

  108 expr: l_expr val .
  110 l_expr: l_expr val . bin_op

    Eq       shift, and go to state 79
    NotEq    shift, and go to state 80
    AddEq    shift, and go to state 81
    SubEq    shift, and go to state 82
    MulEq    shift, and go to state 83
    DivEq    shift, and go to state 84
    GrtrEq   shift, and go to state 85
    LesrEq   shift, and go to state 86
    Or       shift, and go to state 87
    And      shift, and go to state 88
    Range    shift, and go to state 89
    RangeBX  shift, and go to state 90
    RangeEX  shift, and go to state 91
    RangeX   shift, and go to state 92
    '.'      shift, and go to state 93
    '*'      shift, and go to state 94
    '|'      shift, and go to state 95
    '+'      shift, and go to state 96
    '-'      shift, and go to state 97
    '/'      shift, and go to state 98
    '%'      shift, and go to state 99
    '^'      shift, and go to state 100
    '&'      shift, and go to state 101
    '<'      shift, and go to state 102
    '>'      shift, and go to state 103

    $default  reduce using rule 108 (expr)

    bin_op  go to state 124


State 106

   53 block: Indent . statement_list Unindent

    Ident     shift, and go to state 1
    Return    shift, and go to state 2
    If        shift, and go to state 3
    For       shift, and go to state 4
    While     shift, and go to state 5
    Pub       shift, and go to state 6
    Pri       shift, and go to state 7
    Pro       shift, and go to state 8
    Const     shift, and go to state 9
    Ext       shift, and go to state 10
    Dyn       shift, and go to state 11
    Pathogen  shift, and go to state 12
    Newline   shift, and go to state 13

    $default  reduce using rule 46 (maybe_modifier_list)

    statement_list       go to state 125
    statement            go to state 16
    modifier             go to state 17
    maybe_modifier_list  go to state 18
    modifier_list        go to state 19
    decl                 go to state 20
    var_decl             go to state 21
    var_assign           go to state 22
    fn_decl              go to state 23
    fn_call              go to state 24
    ret_stmt             go to state 25
    if_stmt              go to state 26
    while_loop           go to state 27
    for_loop             go to state 28
    var                  go to state 29


State 107

   68 if_stmt: If expr block . maybe_elif_list maybe_else

    Elif  shift, and go to state 126

    Elif      [reduce using rule 65 (maybe_elif)]
    $default  reduce using rule 65 (maybe_elif)

    maybe_elif       go to state 127
    maybe_elif_list  go to state 128


State 108

   70 for_loop: For var_decl In . expr block

    Ident   shift, and go to state 1
    True    shift, and go to state 32
    False   shift, and go to state 33
    IntLit  shift, and go to state 34
    FltLit  shift, and go to state 35
    StrLit  shift, and go to state 36
    '('     shift, and go to state 37

    fn_call  go to state 38
    var      go to state 39
    val      go to state 40
    expr     go to state 129
    l_expr   go to state 42


State 109

   69 while_loop: While expr block .

    $default  reduce using rule 69 (while_loop)


State 110

   32 type: type '*' .

    $default  reduce using rule 32 (type)


State 111

   33 type: type '[' . maybe_expr ']'

    Ident   shift, and go to state 1
    True    shift, and go to state 32
    False   shift, and go to state 33
    IntLit  shift, and go to state 34
    FltLit  shift, and go to state 35
    StrLit  shift, and go to state 36
    '('     shift, and go to state 37

    $default  reduce using rule 107 (maybe_expr)

    fn_call     go to state 38
    var         go to state 39
    val         go to state 40
    maybe_expr  go to state 130
    expr        go to state 76
    l_expr      go to state 42


State 112

   49 decl: maybe_modifier_list type_expr Ident .

    $default  reduce using rule 49 (decl)


State 113

   35 type_expr: type_expr ',' . type

    I8    shift, and go to state 49
    I16   shift, and go to state 50
    I32   shift, and go to state 51
    I64   shift, and go to state 52
    U8    shift, and go to state 53
    U16   shift, and go to state 54
    U32   shift, and go to state 55
    U64   shift, and go to state 56
    ISz   shift, and go to state 57
    Usz   shift, and go to state 58
    F32   shift, and go to state 59
    F64   shift, and go to state 60
    C8    shift, and go to state 61
    C32   shift, and go to state 62
    Bool  shift, and go to state 63
    Void  shift, and go to state 64
    C16   shift, and go to state 65
    C64   shift, and go to state 66

    lit_type  go to state 67
    type      go to state 131


State 114

   36 type_expr: type_expr '|' . type

    I8    shift, and go to state 49
    I16   shift, and go to state 50
    I32   shift, and go to state 51
    I64   shift, and go to state 52
    U8    shift, and go to state 53
    U16   shift, and go to state 54
    U32   shift, and go to state 55
    U64   shift, and go to state 56
    ISz   shift, and go to state 57
    Usz   shift, and go to state 58
    F32   shift, and go to state 59
    F64   shift, and go to state 60
    C8    shift, and go to state 61
    C32   shift, and go to state 62
    Bool  shift, and go to state 63
    Void  shift, and go to state 64
    C16   shift, and go to state 65
    C64   shift, and go to state 66

    lit_type  go to state 67
    type      go to state 132


State 115

   59 fn_decl: decl '(' maybe_expr . ')' ':' params block

    ')'  shift, and go to state 133


State 116

   50 var_decl: decl '=' expr .

    $default  reduce using rule 50 (var_decl)


State 117

   35 type_expr: type_expr . ',' type
   36          | type_expr . '|' type
   55 params: type_expr . Ident

    Ident  shift, and go to state 134
    ','    shift, and go to state 113
    '|'    shift, and go to state 114


State 118

   54 params: params . ',' type_expr Ident
   56 maybe_params: params .

    ','  shift, and go to state 135

    $default  reduce using rule 56 (maybe_params)


State 119

   58 fn_decl: decl ':' maybe_params . block

    Indent  shift, and go to state 106

    block  go to state 136


State 120

   52 var_assign: var '=' expr .

    $default  reduce using rule 52 (var_assign)


State 121

   60 fn_call: Ident '(' maybe_expr ')' .

    $default  reduce using rule 60 (fn_call)


State 122

   96 var: Ident '[' expr ']' .

    $default  reduce using rule 96 (var)


State 123

   99 val: '(' expr ')' .

    $default  reduce using rule 99 (val)


State 124

  110 l_expr: l_expr val bin_op .

    $default  reduce using rule 110 (l_expr)


State 125

    3 statement_list: statement_list . statement
   53 block: Indent statement_list . Unindent

    Ident     shift, and go to state 1
    Return    shift, and go to state 2
    If        shift, and go to state 3
    For       shift, and go to state 4
    While     shift, and go to state 5
    Pub       shift, and go to state 6
    Pri       shift, and go to state 7
    Pro       shift, and go to state 8
    Const     shift, and go to state 9
    Ext       shift, and go to state 10
    Dyn       shift, and go to state 11
    Pathogen  shift, and go to state 12
    Newline   shift, and go to state 13
    Unindent  shift, and go to state 137

    $default  reduce using rule 46 (maybe_modifier_list)

    statement            go to state 48
    modifier             go to state 17
    maybe_modifier_list  go to state 18
    modifier_list        go to state 19
    decl                 go to state 20
    var_decl             go to state 21
    var_assign           go to state 22
    fn_decl              go to state 23
    fn_call              go to state 24
    ret_stmt             go to state 25
    if_stmt              go to state 26
    while_loop           go to state 27
    for_loop             go to state 28
    var                  go to state 29


State 126

   64 maybe_elif: Elif . block

    Indent  shift, and go to state 106

    block  go to state 138


State 127

   67 maybe_elif_list: maybe_elif .

    $default  reduce using rule 67 (maybe_elif_list)


State 128

   66 maybe_elif_list: maybe_elif_list . Elif block
   68 if_stmt: If expr block maybe_elif_list . maybe_else

    Elif  shift, and go to state 139
    Else  shift, and go to state 140

    $default  reduce using rule 63 (maybe_else)

    maybe_else  go to state 141


State 129

   70 for_loop: For var_decl In expr . block

    Indent  shift, and go to state 106

    block  go to state 142


State 130

   33 type: type '[' maybe_expr . ']'

    ']'  shift, and go to state 143


State 131

   32 type: type . '*'
   33     | type . '[' maybe_expr ']'
   35 type_expr: type_expr ',' type .

    '*'  shift, and go to state 110
    '['  shift, and go to state 111

    $default  reduce using rule 35 (type_expr)


State 132

   32 type: type . '*'
   33     | type . '[' maybe_expr ']'
   36 type_expr: type_expr '|' type .

    '*'  shift, and go to state 110
    '['  shift, and go to state 111

    $default  reduce using rule 36 (type_expr)


State 133

   59 fn_decl: decl '(' maybe_expr ')' . ':' params block

    ':'  shift, and go to state 144


State 134

   55 params: type_expr Ident .

    $default  reduce using rule 55 (params)


State 135

   54 params: params ',' . type_expr Ident

    I8    shift, and go to state 49
    I16   shift, and go to state 50
    I32   shift, and go to state 51
    I64   shift, and go to state 52
    U8    shift, and go to state 53
    U16   shift, and go to state 54
    U32   shift, and go to state 55
    U64   shift, and go to state 56
    ISz   shift, and go to state 57
    Usz   shift, and go to state 58
    F32   shift, and go to state 59
    F64   shift, and go to state 60
    C8    shift, and go to state 61
    C32   shift, and go to state 62
    Bool  shift, and go to state 63
    Void  shift, and go to state 64
    C16   shift, and go to state 65
    C64   shift, and go to state 66

    lit_type   go to state 67
    type       go to state 68
    type_expr  go to state 145


State 136

   58 fn_decl: decl ':' maybe_params block .

    $default  reduce using rule 58 (fn_decl)


State 137

   53 block: Indent statement_list Unindent .

    $default  reduce using rule 53 (block)


State 138

   64 maybe_elif: Elif block .

    $default  reduce using rule 64 (maybe_elif)


State 139

   66 maybe_elif_list: maybe_elif_list Elif . block

    Indent  shift, and go to state 106

    block  go to state 146


State 140

   62 maybe_else: Else . block

    Indent  shift, and go to state 106

    block  go to state 147


State 141

   68 if_stmt: If expr block maybe_elif_list maybe_else .

    $default  reduce using rule 68 (if_stmt)


State 142

   70 for_loop: For var_decl In expr block .

    $default  reduce using rule 70 (for_loop)


State 143

   33 type: type '[' maybe_expr ']' .

    $default  reduce using rule 33 (type)


State 144

   59 fn_decl: decl '(' maybe_expr ')' ':' . params block

    I8    shift, and go to state 49
    I16   shift, and go to state 50
    I32   shift, and go to state 51
    I64   shift, and go to state 52
    U8    shift, and go to state 53
    U16   shift, and go to state 54
    U32   shift, and go to state 55
    U64   shift, and go to state 56
    ISz   shift, and go to state 57
    Usz   shift, and go to state 58
    F32   shift, and go to state 59
    F64   shift, and go to state 60
    C8    shift, and go to state 61
    C32   shift, and go to state 62
    Bool  shift, and go to state 63
    Void  shift, and go to state 64
    C16   shift, and go to state 65
    C64   shift, and go to state 66

    lit_type   go to state 67
    type       go to state 68
    type_expr  go to state 117
    params     go to state 148


State 145

   35 type_expr: type_expr . ',' type
   36          | type_expr . '|' type
   54 params: params ',' type_expr . Ident

    Ident  shift, and go to state 149
    ','    shift, and go to state 113
    '|'    shift, and go to state 114


State 146

   66 maybe_elif_list: maybe_elif_list Elif block .

    $default  reduce using rule 66 (maybe_elif_list)


State 147

   62 maybe_else: Else block .

    $default  reduce using rule 62 (maybe_else)


State 148

   54 params: params . ',' type_expr Ident
   59 fn_decl: decl '(' maybe_expr ')' ':' params . block

    Indent  shift, and go to state 106
    ','     shift, and go to state 135

    block  go to state 150


State 149

   54 params: params ',' type_expr Ident .

    $default  reduce using rule 54 (params)


State 150

   59 fn_decl: decl '(' maybe_expr ')' ':' params block .

    $default  reduce using rule 59 (fn_decl)
